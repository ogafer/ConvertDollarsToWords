//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dolars_In_words.ServiceReferenceClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceClient.IServiceConvertToDollars")]
    public interface IServiceConvertToDollars {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceConvertToDollars/DollarsToWords", ReplyAction="http://tempuri.org/IServiceConvertToDollars/DollarsToWordsResponse")]
        string DollarsToWords(long dollars, int cents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceConvertToDollars/DollarsToWords", ReplyAction="http://tempuri.org/IServiceConvertToDollars/DollarsToWordsResponse")]
        System.Threading.Tasks.Task<string> DollarsToWordsAsync(long dollars, int cents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceConvertToDollars/ParsingTheString", ReplyAction="http://tempuri.org/IServiceConvertToDollars/ParsingTheStringResponse")]
        Dolars_In_words.ServiceReferenceClient.ParsingTheStringResponse ParsingTheString(Dolars_In_words.ServiceReferenceClient.ParsingTheStringRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceConvertToDollars/ParsingTheString", ReplyAction="http://tempuri.org/IServiceConvertToDollars/ParsingTheStringResponse")]
        System.Threading.Tasks.Task<Dolars_In_words.ServiceReferenceClient.ParsingTheStringResponse> ParsingTheStringAsync(Dolars_In_words.ServiceReferenceClient.ParsingTheStringRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceConvertToDollars/Result", ReplyAction="http://tempuri.org/IServiceConvertToDollars/ResultResponse")]
        string Result();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceConvertToDollars/Result", ReplyAction="http://tempuri.org/IServiceConvertToDollars/ResultResponse")]
        System.Threading.Tasks.Task<string> ResultAsync();
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ParsingTheString", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ParsingTheStringRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string numberFromUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long dollarsConverted;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int centsConverted;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string error;
        
        public ParsingTheStringRequest() {
        }
        
        public ParsingTheStringRequest(string numberFromUser, long dollarsConverted, int centsConverted, string error) {
            this.numberFromUser = numberFromUser;
            this.dollarsConverted = dollarsConverted;
            this.centsConverted = centsConverted;
            this.error = error;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ParsingTheStringResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ParsingTheStringResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long dollarsConverted;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int centsConverted;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string error;
        
        public ParsingTheStringResponse() {
        }
        
        public ParsingTheStringResponse(long dollarsConverted, int centsConverted, string error) {
            this.dollarsConverted = dollarsConverted;
            this.centsConverted = centsConverted;
            this.error = error;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceConvertToDollarsChannel : Dolars_In_words.ServiceReferenceClient.IServiceConvertToDollars, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceConvertToDollarsClient : System.ServiceModel.ClientBase<Dolars_In_words.ServiceReferenceClient.IServiceConvertToDollars>, Dolars_In_words.ServiceReferenceClient.IServiceConvertToDollars {
        
        public ServiceConvertToDollarsClient() {
        }
        
        public ServiceConvertToDollarsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceConvertToDollarsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceConvertToDollarsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceConvertToDollarsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string DollarsToWords(long dollars, int cents) {
            return base.Channel.DollarsToWords(dollars, cents);
        }
        
        public System.Threading.Tasks.Task<string> DollarsToWordsAsync(long dollars, int cents) {
            return base.Channel.DollarsToWordsAsync(dollars, cents);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Dolars_In_words.ServiceReferenceClient.ParsingTheStringResponse Dolars_In_words.ServiceReferenceClient.IServiceConvertToDollars.ParsingTheString(Dolars_In_words.ServiceReferenceClient.ParsingTheStringRequest request) {
            return base.Channel.ParsingTheString(request);
        }
        
        public void ParsingTheString(string numberFromUser, ref long dollarsConverted, ref int centsConverted, ref string error) {
            Dolars_In_words.ServiceReferenceClient.ParsingTheStringRequest inValue = new Dolars_In_words.ServiceReferenceClient.ParsingTheStringRequest();
            inValue.numberFromUser = numberFromUser;
            inValue.dollarsConverted = dollarsConverted;
            inValue.centsConverted = centsConverted;
            inValue.error = error;
            Dolars_In_words.ServiceReferenceClient.ParsingTheStringResponse retVal = ((Dolars_In_words.ServiceReferenceClient.IServiceConvertToDollars)(this)).ParsingTheString(inValue);
            dollarsConverted = retVal.dollarsConverted;
            centsConverted = retVal.centsConverted;
            error = retVal.error;
        }
        
        public System.Threading.Tasks.Task<Dolars_In_words.ServiceReferenceClient.ParsingTheStringResponse> ParsingTheStringAsync(Dolars_In_words.ServiceReferenceClient.ParsingTheStringRequest request) {
            return base.Channel.ParsingTheStringAsync(request);
        }
        
        public string Result() {
            return base.Channel.Result();
        }
        
        public System.Threading.Tasks.Task<string> ResultAsync() {
            return base.Channel.ResultAsync();
        }
    }
}
